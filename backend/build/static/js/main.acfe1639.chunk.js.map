{"version":3,"sources":["InputField.js","SubmitButton.js","stores/UserStore.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["InputField","className","type","this","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","extendObservable","loading","isLoggedIn","username","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.acfe1639.chunk.js","sourcesContent":["import React from 'react';\n\nclass InputField extends React.Component {\n    render() {\n        return (\n            <div className=\"inputField\">\n                <input\n                    className='input'\n                    type={this.props.type}\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    onChange={(e) => this.props.onChange(e.target.value)}\n                />\n            </div>\n        )\n    }\n}\n\nexport default InputField;","import React from 'react';\n\nclass SubmitButton extends React.Component {\n    render(){\n        return (\n            <div className=\"submitButton\">\n                <button \n                className='btn'\n                disabled={this.props.disabled}\n                onClick={ () => this.props.onClick()}\n                >\n                    {this.props.text}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default SubmitButton;","import { extendObservable } from 'mobx';\n\nclass UserStore {\n    constructor(){\n        extendObservable(this, {\n            loading: true, \n            isLoggedIn: false,\n            username: ''\n        })\n    }\n}\n\nexport default new UserStore()","import React from 'react';\nimport InputField from './InputField';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './stores/UserStore';\n\nclass LoginForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            buttonDisabled: false\n        }\n    }\n\n    setInputValue(property, val) {\n        val = val.trim()\n        if (val.length > 12) {\n            return\n        }\n        this.setState({\n            [property]: val\n        })\n    }\n\n    resetForm() {\n        this.setState({\n            username: '',\n            password: '',\n            buttonDisabled: false\n        })\n    }\n\n    async doLogin() {\n        if (!this.state.username) {\n            return\n        }\n        if (!this.state.password) {\n            return\n        }\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n            let res = await fetch('/login', {\n                method: \"POST\",\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n            })\n\n            let result = await res.json();\n            if (result && result.success) {\n                UserStore.isLoggedIn = true\n                UserStore.username = result.username\n            }\n\n            else if (result && result.success === false) {\n                this.resetForm()\n                alert(result.msg)\n            }\n\n        }\n        catch (e) {\n            console.log(e)\n            this.resetForm()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"loginForm\">\n                Log In\n                <InputField\n                    type='text'\n                    placeholder='Username'\n                    value={this.state.username ? this.state.username : ''}\n                    onChange={(val) => this.setInputValue('username', val)}\n                />\n                <InputField\n                    type='password'\n                    placeholder='Password'\n                    value={this.state.password ? this.state.password : ''}\n                    onChange={(val) => this.setInputValue('password', val)}\n                />\n\n                <SubmitButton\n                    text=\"Login\"\n                    disabled={this.state.buttonDisabled}\n                    onClick={ () =>  this.doLogin() }\n                />\n\n            </div>\n        )\n    }\n}\n\nexport default LoginForm;","import React from 'react';\nimport './App.css';\nimport { observer } from 'mobx-react';\n\nimport LoginForm from './LoginForm';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './stores/UserStore';\n\nclass App extends React.Component {\n\n  async componentDidMount() {\n    try {\n      let res = await fetch('./isLoggedIn', {\n        method: 'POST',\n        headers: {\n          'Accept': 'Application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n\n      else {\n        UserStore.loading = false\n        UserStore.isLoggedIn = false\n      }\n\n    }\n\n    catch (e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n  async doLogout() {\n    try {\n      let res = await fetch('./logout', {\n        method: 'POST',\n        headers: {\n          'Accept': 'Application/json',\n          'Content-type': 'application/json'\n        }\n      })\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n\n      }\n\n    }\n\n    catch (e) {\n      console.log(e)\n    }\n  }\n\n  render() {\n\n    if (UserStore.loading) {\n      return (\n        <div className=\"app\">\n          <div className='container'>\n            Loading, please wait...\n          </div>\n        </div>\n      )\n    }\n\n    else {\n\n      if (UserStore.isLoggedIn) {\n        return (\n          <div className=\"app\">\n            <div className='container'>\n              Welcome {UserStore.username}\n\n              <SubmitButton\n                text={'Log Out'}\n                disabled={false}\n                onClick={() => this.doLogout()}\n              />\n            </div>\n          </div>\n        )\n      }\n\n      return (\n        <div className=\"app\">\n          <div className='container'>\n            <LoginForm />\n          </div>\n        </div>\n      );\n    }\n\n\n  }\n\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}